// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ppx

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Poisson struct {
	_tab flatbuffers.Table
}

func GetRootAsPoisson(buf []byte, offset flatbuffers.UOffsetT) *Poisson {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Poisson{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPoisson(buf []byte, offset flatbuffers.UOffsetT) *Poisson {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Poisson{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Poisson) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Poisson) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Poisson) Rate(obj *Tensor) *Tensor {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Tensor)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PoissonStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PoissonAddRate(builder *flatbuffers.Builder, rate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rate), 0)
}
func PoissonEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
