-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: ppx

local flatbuffers = require('flatbuffers')

local Normal = {} -- the module
local Normal_mt = {} -- the class metatable

function Normal.New()
    local o = {}
    setmetatable(o, {__index = Normal_mt})
    return o
end
function Normal.GetRootAsNormal(buf, offset)
    if type(buf) == "string" then
        buf = flatbuffers.binaryArray.New(buf)
    end
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = Normal.New()
    o:Init(buf, n + offset)
    return o
end
function Normal_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Normal_mt:Mean()
    local o = self.view:Offset(4)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = require('ppx.Tensor').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function Normal_mt:Stddev()
    local o = self.view:Offset(6)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = require('ppx.Tensor').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function Normal.Start(builder) builder:StartObject(2) end
function Normal.AddMean(builder, mean) builder:PrependUOffsetTRelativeSlot(0, mean, 0) end
function Normal.AddStddev(builder, stddev) builder:PrependUOffsetTRelativeSlot(1, stddev, 0) end
function Normal.End(builder) return builder:EndObject() end

return Normal -- return the module