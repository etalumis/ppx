// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Tensor } from '../ppx/tensor';


export class Gamma {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Gamma {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGamma(bb:flatbuffers.ByteBuffer, obj?:Gamma):Gamma {
  return (obj || new Gamma()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGamma(bb:flatbuffers.ByteBuffer, obj?:Gamma):Gamma {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Gamma()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

concentration(obj?:Tensor):Tensor|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Tensor()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rate(obj?:Tensor):Tensor|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Tensor()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGamma(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addConcentration(builder:flatbuffers.Builder, concentrationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, concentrationOffset, 0);
}

static addRate(builder:flatbuffers.Builder, rateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rateOffset, 0);
}

static endGamma(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
