// automatically generated by the FlatBuffers compiler, do not modify

import { Handshake } from '../ppx/handshake';
import { HandshakeResult } from '../ppx/handshake-result';
import { Observe } from '../ppx/observe';
import { ObserveResult } from '../ppx/observe-result';
import { Reset } from '../ppx/reset';
import { Run } from '../ppx/run';
import { RunResult } from '../ppx/run-result';
import { Sample } from '../ppx/sample';
import { SampleResult } from '../ppx/sample-result';
import { Tag } from '../ppx/tag';
import { TagResult } from '../ppx/tag-result';


export enum MessageBody{
  NONE = 0,
  Handshake = 1,
  HandshakeResult = 2,
  Run = 3,
  RunResult = 4,
  Sample = 5,
  SampleResult = 6,
  Observe = 7,
  ObserveResult = 8,
  Tag = 9,
  TagResult = 10,
  Reset = 11
}

export function unionToMessageBody(
  type: MessageBody,
  accessor: (obj:Handshake|HandshakeResult|Observe|ObserveResult|Reset|Run|RunResult|Sample|SampleResult|Tag|TagResult) => Handshake|HandshakeResult|Observe|ObserveResult|Reset|Run|RunResult|Sample|SampleResult|Tag|TagResult|null
): Handshake|HandshakeResult|Observe|ObserveResult|Reset|Run|RunResult|Sample|SampleResult|Tag|TagResult|null {
  switch(MessageBody[type]) {
    case 'NONE': return null; 
    case 'Handshake': return accessor(new Handshake())! as Handshake;
    case 'HandshakeResult': return accessor(new HandshakeResult())! as HandshakeResult;
    case 'Run': return accessor(new Run())! as Run;
    case 'RunResult': return accessor(new RunResult())! as RunResult;
    case 'Sample': return accessor(new Sample())! as Sample;
    case 'SampleResult': return accessor(new SampleResult())! as SampleResult;
    case 'Observe': return accessor(new Observe())! as Observe;
    case 'ObserveResult': return accessor(new ObserveResult())! as ObserveResult;
    case 'Tag': return accessor(new Tag())! as Tag;
    case 'TagResult': return accessor(new TagResult())! as TagResult;
    case 'Reset': return accessor(new Reset())! as Reset;
    default: return null;
  }
}

export function unionListToMessageBody(
  type: MessageBody, 
  accessor: (index: number, obj:Handshake|HandshakeResult|Observe|ObserveResult|Reset|Run|RunResult|Sample|SampleResult|Tag|TagResult) => Handshake|HandshakeResult|Observe|ObserveResult|Reset|Run|RunResult|Sample|SampleResult|Tag|TagResult|null, 
  index: number
): Handshake|HandshakeResult|Observe|ObserveResult|Reset|Run|RunResult|Sample|SampleResult|Tag|TagResult|null {
  switch(MessageBody[type]) {
    case 'NONE': return null; 
    case 'Handshake': return accessor(index, new Handshake())! as Handshake;
    case 'HandshakeResult': return accessor(index, new HandshakeResult())! as HandshakeResult;
    case 'Run': return accessor(index, new Run())! as Run;
    case 'RunResult': return accessor(index, new RunResult())! as RunResult;
    case 'Sample': return accessor(index, new Sample())! as Sample;
    case 'SampleResult': return accessor(index, new SampleResult())! as SampleResult;
    case 'Observe': return accessor(index, new Observe())! as Observe;
    case 'ObserveResult': return accessor(index, new ObserveResult())! as ObserveResult;
    case 'Tag': return accessor(index, new Tag())! as Tag;
    case 'TagResult': return accessor(index, new TagResult())! as TagResult;
    case 'Reset': return accessor(index, new Reset())! as Reset;
    default: return null;
  }
}

