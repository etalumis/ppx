// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class HandshakeResult {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):HandshakeResult {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHandshakeResult(bb:flatbuffers.ByteBuffer, obj?:HandshakeResult):HandshakeResult {
  return (obj || new HandshakeResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHandshakeResult(bb:flatbuffers.ByteBuffer, obj?:HandshakeResult):HandshakeResult {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HandshakeResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

systemName():string|null
systemName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
systemName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

modelName():string|null
modelName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modelName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHandshakeResult(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSystemName(builder:flatbuffers.Builder, systemNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, systemNameOffset, 0);
}

static addModelName(builder:flatbuffers.Builder, modelNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, modelNameOffset, 0);
}

static endHandshakeResult(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHandshakeResult(builder:flatbuffers.Builder, systemNameOffset:flatbuffers.Offset, modelNameOffset:flatbuffers.Offset):flatbuffers.Offset {
  HandshakeResult.startHandshakeResult(builder);
  HandshakeResult.addSystemName(builder, systemNameOffset);
  HandshakeResult.addModelName(builder, modelNameOffset);
  return HandshakeResult.endHandshakeResult(builder);
}
}
