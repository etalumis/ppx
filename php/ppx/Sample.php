<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace ppx;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Sample extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Sample
     */
    public static function getRootAsSample(ByteBuffer $bb)
    {
        $obj = new Sample();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SampleIdentifier()
    {
        return "PPXF";
    }

    public static function SampleBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SampleIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Sample
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getAddress()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return byte
     */
    public function getDistributionType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : \ppx\Distribution::NONE;
    }

    /**
     * @returnint
     */
    public function getDistribution($obj)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__union($obj, $o) : null;
    }

    /**
     * @return bool
     */
    public function getControl()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : true;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSample(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Sample
     */
    public static function createSample(FlatBufferBuilder $builder, $address, $name, $distribution_type, $distribution, $control)
    {
        $builder->startObject(5);
        self::addAddress($builder, $address);
        self::addName($builder, $name);
        self::addDistributionType($builder, $distribution_type);
        self::addDistribution($builder, $distribution);
        self::addControl($builder, $control);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAddress(FlatBufferBuilder $builder, $address)
    {
        $builder->addOffsetX(0, $address, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(1, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addDistributionType(FlatBufferBuilder $builder, $distributionType)
    {
        $builder->addByteX(2, $distributionType, 0);
    }

    public static function addDistribution(FlatBufferBuilder $builder, $offset)
    {
        $builder->addOffsetX(3, $offset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addControl(FlatBufferBuilder $builder, $control)
    {
        $builder->addBoolX(4, $control, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSample(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
