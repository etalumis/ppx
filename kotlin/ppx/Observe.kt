// automatically generated by the FlatBuffers compiler, do not modify

package ppx

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Observe : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Observe {
        __init(_i, _bb)
        return this
    }
    val address : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val addressAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun addressInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val name : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val distributionType : UByte
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun distribution(obj: Table) : Table? {
        val o = __offset(10); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    val value : ppx.Tensor? get() = value(ppx.Tensor())
    fun value(obj: ppx.Tensor) : ppx.Tensor? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsObserve(_bb: ByteBuffer): Observe = getRootAsObserve(_bb, Observe())
        fun getRootAsObserve(_bb: ByteBuffer, obj: Observe): Observe {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createObserve(builder: FlatBufferBuilder, addressOffset: Int, nameOffset: Int, distributionType: UByte, distributionOffset: Int, valueOffset: Int) : Int {
            builder.startTable(5)
            addValue(builder, valueOffset)
            addDistribution(builder, distributionOffset)
            addName(builder, nameOffset)
            addAddress(builder, addressOffset)
            addDistributionType(builder, distributionType)
            return endObserve(builder)
        }
        fun startObserve(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addAddress(builder: FlatBufferBuilder, address: Int) = builder.addOffset(0, address, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(1, name, 0)
        fun addDistributionType(builder: FlatBufferBuilder, distributionType: UByte) = builder.addByte(2, distributionType.toByte(), 0)
        fun addDistribution(builder: FlatBufferBuilder, distribution: Int) = builder.addOffset(3, distribution, 0)
        fun addValue(builder: FlatBufferBuilder, value: Int) = builder.addOffset(4, value, 0)
        fun endObserve(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
