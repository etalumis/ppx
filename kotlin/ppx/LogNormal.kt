// automatically generated by the FlatBuffers compiler, do not modify

package ppx

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class LogNormal : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogNormal {
        __init(_i, _bb)
        return this
    }
    val loc : ppx.Tensor? get() = loc(ppx.Tensor())
    fun loc(obj: ppx.Tensor) : ppx.Tensor? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val scale : ppx.Tensor? get() = scale(ppx.Tensor())
    fun scale(obj: ppx.Tensor) : ppx.Tensor? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsLogNormal(_bb: ByteBuffer): LogNormal = getRootAsLogNormal(_bb, LogNormal())
        fun getRootAsLogNormal(_bb: ByteBuffer, obj: LogNormal): LogNormal {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createLogNormal(builder: FlatBufferBuilder, locOffset: Int, scaleOffset: Int) : Int {
            builder.startTable(2)
            addScale(builder, scaleOffset)
            addLoc(builder, locOffset)
            return endLogNormal(builder)
        }
        fun startLogNormal(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addLoc(builder: FlatBufferBuilder, loc: Int) = builder.addOffset(0, loc, 0)
        fun addScale(builder: FlatBufferBuilder, scale: Int) = builder.addOffset(1, scale, 0)
        fun endLogNormal(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
