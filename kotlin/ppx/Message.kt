// automatically generated by the FlatBuffers compiler, do not modify

package ppx

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Message : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Message {
        __init(_i, _bb)
        return this
    }
    val bodyType : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun body(obj: Table) : Table? {
        val o = __offset(6); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsMessage(_bb: ByteBuffer): Message = getRootAsMessage(_bb, Message())
        fun getRootAsMessage(_bb: ByteBuffer, obj: Message): Message {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MessageBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "PPXF")
        fun createMessage(builder: FlatBufferBuilder, bodyType: UByte, bodyOffset: Int) : Int {
            builder.startTable(2)
            addBody(builder, bodyOffset)
            addBodyType(builder, bodyType)
            return endMessage(builder)
        }
        fun startMessage(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addBodyType(builder: FlatBufferBuilder, bodyType: UByte) = builder.addByte(0, bodyType.toByte(), 0)
        fun addBody(builder: FlatBufferBuilder, body: Int) = builder.addOffset(1, body, 0)
        fun endMessage(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMessageBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "PPXF")
        fun finishSizePrefixedMessageBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "PPXF")
    }
}
