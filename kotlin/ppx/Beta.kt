// automatically generated by the FlatBuffers compiler, do not modify

package ppx

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Beta : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Beta {
        __init(_i, _bb)
        return this
    }
    val concentration1 : ppx.Tensor? get() = concentration1(ppx.Tensor())
    fun concentration1(obj: ppx.Tensor) : ppx.Tensor? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val concentration0 : ppx.Tensor? get() = concentration0(ppx.Tensor())
    fun concentration0(obj: ppx.Tensor) : ppx.Tensor? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsBeta(_bb: ByteBuffer): Beta = getRootAsBeta(_bb, Beta())
        fun getRootAsBeta(_bb: ByteBuffer, obj: Beta): Beta {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createBeta(builder: FlatBufferBuilder, concentration1Offset: Int, concentration0Offset: Int) : Int {
            builder.startTable(2)
            addConcentration0(builder, concentration0Offset)
            addConcentration1(builder, concentration1Offset)
            return endBeta(builder)
        }
        fun startBeta(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addConcentration1(builder: FlatBufferBuilder, concentration1: Int) = builder.addOffset(0, concentration1, 0)
        fun addConcentration0(builder: FlatBufferBuilder, concentration0: Int) = builder.addOffset(1, concentration0, 0)
        fun endBeta(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
