// automatically generated by the FlatBuffers compiler, do not modify

package ppx

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Binomial : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Binomial {
        __init(_i, _bb)
        return this
    }
    val totalCount : ppx.Tensor? get() = totalCount(ppx.Tensor())
    fun totalCount(obj: ppx.Tensor) : ppx.Tensor? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val probs : ppx.Tensor? get() = probs(ppx.Tensor())
    fun probs(obj: ppx.Tensor) : ppx.Tensor? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsBinomial(_bb: ByteBuffer): Binomial = getRootAsBinomial(_bb, Binomial())
        fun getRootAsBinomial(_bb: ByteBuffer, obj: Binomial): Binomial {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createBinomial(builder: FlatBufferBuilder, totalCountOffset: Int, probsOffset: Int) : Int {
            builder.startTable(2)
            addProbs(builder, probsOffset)
            addTotalCount(builder, totalCountOffset)
            return endBinomial(builder)
        }
        fun startBinomial(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addTotalCount(builder: FlatBufferBuilder, totalCount: Int) = builder.addOffset(0, totalCount, 0)
        fun addProbs(builder: FlatBufferBuilder, probs: Int) = builder.addOffset(1, probs, 0)
        fun endBinomial(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
