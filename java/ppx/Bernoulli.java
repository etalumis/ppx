// automatically generated by the FlatBuffers compiler, do not modify

package ppx;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Bernoulli extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Bernoulli getRootAsBernoulli(ByteBuffer _bb) { return getRootAsBernoulli(_bb, new Bernoulli()); }
  public static Bernoulli getRootAsBernoulli(ByteBuffer _bb, Bernoulli obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Bernoulli __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ppx.Tensor probs() { return probs(new ppx.Tensor()); }
  public ppx.Tensor probs(ppx.Tensor obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createBernoulli(FlatBufferBuilder builder,
      int probsOffset) {
    builder.startTable(1);
    Bernoulli.addProbs(builder, probsOffset);
    return Bernoulli.endBernoulli(builder);
  }

  public static void startBernoulli(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addProbs(FlatBufferBuilder builder, int probsOffset) { builder.addOffset(0, probsOffset, 0); }
  public static int endBernoulli(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Bernoulli get(int j) { return get(new Bernoulli(), j); }
    public Bernoulli get(Bernoulli obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

