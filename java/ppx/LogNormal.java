// automatically generated by the FlatBuffers compiler, do not modify

package ppx;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class LogNormal extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static LogNormal getRootAsLogNormal(ByteBuffer _bb) { return getRootAsLogNormal(_bb, new LogNormal()); }
  public static LogNormal getRootAsLogNormal(ByteBuffer _bb, LogNormal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LogNormal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ppx.Tensor loc() { return loc(new ppx.Tensor()); }
  public ppx.Tensor loc(ppx.Tensor obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ppx.Tensor scale() { return scale(new ppx.Tensor()); }
  public ppx.Tensor scale(ppx.Tensor obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createLogNormal(FlatBufferBuilder builder,
      int locOffset,
      int scaleOffset) {
    builder.startTable(2);
    LogNormal.addScale(builder, scaleOffset);
    LogNormal.addLoc(builder, locOffset);
    return LogNormal.endLogNormal(builder);
  }

  public static void startLogNormal(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addLoc(FlatBufferBuilder builder, int locOffset) { builder.addOffset(0, locOffset, 0); }
  public static void addScale(FlatBufferBuilder builder, int scaleOffset) { builder.addOffset(1, scaleOffset, 0); }
  public static int endLogNormal(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LogNormal get(int j) { return get(new LogNormal(), j); }
    public LogNormal get(LogNormal obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

