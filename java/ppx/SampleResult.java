// automatically generated by the FlatBuffers compiler, do not modify

package ppx;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SampleResult extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static SampleResult getRootAsSampleResult(ByteBuffer _bb) { return getRootAsSampleResult(_bb, new SampleResult()); }
  public static SampleResult getRootAsSampleResult(ByteBuffer _bb, SampleResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SampleResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ppx.Tensor result() { return result(new ppx.Tensor()); }
  public ppx.Tensor result(ppx.Tensor obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createSampleResult(FlatBufferBuilder builder,
      int resultOffset) {
    builder.startTable(1);
    SampleResult.addResult(builder, resultOffset);
    return SampleResult.endSampleResult(builder);
  }

  public static void startSampleResult(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addResult(FlatBufferBuilder builder, int resultOffset) { builder.addOffset(0, resultOffset, 0); }
  public static int endSampleResult(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SampleResult get(int j) { return get(new SampleResult(), j); }
    public SampleResult get(SampleResult obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

