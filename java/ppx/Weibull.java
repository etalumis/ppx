// automatically generated by the FlatBuffers compiler, do not modify

package ppx;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Weibull extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Weibull getRootAsWeibull(ByteBuffer _bb) { return getRootAsWeibull(_bb, new Weibull()); }
  public static Weibull getRootAsWeibull(ByteBuffer _bb, Weibull obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Weibull __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ppx.Tensor scale() { return scale(new ppx.Tensor()); }
  public ppx.Tensor scale(ppx.Tensor obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ppx.Tensor concentration() { return concentration(new ppx.Tensor()); }
  public ppx.Tensor concentration(ppx.Tensor obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createWeibull(FlatBufferBuilder builder,
      int scaleOffset,
      int concentrationOffset) {
    builder.startTable(2);
    Weibull.addConcentration(builder, concentrationOffset);
    Weibull.addScale(builder, scaleOffset);
    return Weibull.endWeibull(builder);
  }

  public static void startWeibull(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addScale(FlatBufferBuilder builder, int scaleOffset) { builder.addOffset(0, scaleOffset, 0); }
  public static void addConcentration(FlatBufferBuilder builder, int concentrationOffset) { builder.addOffset(1, concentrationOffset, 0); }
  public static int endWeibull(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Weibull get(int j) { return get(new Weibull(), j); }
    public Weibull get(Weibull obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

