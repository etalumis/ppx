// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ppx
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Binomial : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Binomial GetRootAsBinomial(ByteBuffer _bb) { return GetRootAsBinomial(_bb, new Binomial()); }
  public static Binomial GetRootAsBinomial(ByteBuffer _bb, Binomial obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Binomial __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ppx.Tensor? TotalCount { get { int o = __p.__offset(4); return o != 0 ? (ppx.Tensor?)(new ppx.Tensor()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ppx.Tensor? Probs { get { int o = __p.__offset(6); return o != 0 ? (ppx.Tensor?)(new ppx.Tensor()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<ppx.Binomial> CreateBinomial(FlatBufferBuilder builder,
      Offset<ppx.Tensor> total_countOffset = default(Offset<ppx.Tensor>),
      Offset<ppx.Tensor> probsOffset = default(Offset<ppx.Tensor>)) {
    builder.StartTable(2);
    Binomial.AddProbs(builder, probsOffset);
    Binomial.AddTotalCount(builder, total_countOffset);
    return Binomial.EndBinomial(builder);
  }

  public static void StartBinomial(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTotalCount(FlatBufferBuilder builder, Offset<ppx.Tensor> totalCountOffset) { builder.AddOffset(0, totalCountOffset.Value, 0); }
  public static void AddProbs(FlatBufferBuilder builder, Offset<ppx.Tensor> probsOffset) { builder.AddOffset(1, probsOffset.Value, 0); }
  public static Offset<ppx.Binomial> EndBinomial(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ppx.Binomial>(o);
  }
};


}
